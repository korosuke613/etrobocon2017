digraph "testing::internal::FunctionMocker&lt; R(A1, A2, A3, A4, A5, A6)&gt;"
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node3 [label="{testing::internal::\lFunctionMocker\< R(A1,\l A2, A3, A4, A5, A6)\>\n||+ With()\l+ Invoke()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node4 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node4 [label="{testing::internal::\lFunctionMockerBase\<\l R(A1, A2, A3, A4, A5, A6)\>\n||+ FunctionMockerBase()\l+ ~FunctionMockerBase()\l+ FindOnCallSpec()\l+ PerformDefaultAction()\l+ UntypedPerformDefaultAction()\l+ UntypedPerformAction()\l+ ClearDefaultActionsLocked()\l# InvokeWith()\l# AddNewOnCallSpec()\l# AddNewExpectation()\l# current_spec()\l- DescribeDefaultActionTo()\l- UntypedDescribeUninterestingCall()\l- UntypedFindMatchingExpectation()\l- UntypedPrintArgs()\l- FindMatchingExpectationLocked()\l- FormatUnexpectedCallMessage\lLocked()\l- PrintTriedExpectationsLocked()\l- GTEST_DISALLOW_COPY\l_AND_ASSIGN_()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$da/de9/classtesting_1_1internal_1_1_function_mocker_base.html"];
  Node5 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node5 [label="{testing::internal::\lUntypedFunctionMockerBase\n|# mock_obj_\l# name_\l# untyped_on_call_specs_\l# untyped_expectations_\l|+ UntypedFunctionMockerBase()\l+ ~UntypedFunctionMockerBase()\l+ VerifyAndClearExpectations\lLocked()\l+ ClearDefaultActionsLocked()\l+ UntypedPerformDefaultAction()\l+ UntypedPerformAction()\l+ UntypedDescribeUninterestingCall()\l+ UntypedFindMatchingExpectation()\l+ UntypedPrintArgs()\l+ RegisterOwner()\l+ SetOwnerAndName()\l+ MockObject()\l+ Name()\l+ UntypedInvokeWith()\l# GetHandleOf()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d3/d5f/classtesting_1_1internal_1_1_untyped_function_mocker_base.html"];
  Node6 -> Node4 [color="grey25",fontsize="10",style="solid",label=" -current_spec_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node6 [label="{testing::internal::\lMockSpec\< R(A1, A2,\l A3, A4, A5, A6) \>\n||+ MockSpec()\l+ InternalDefaultActionSetAt()\l+ InternalExpectedAt()\l- SetMatchers()\l- GTEST_DISALLOW_ASSIGN_()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d8/dfd/classtesting_1_1internal_1_1_mock_spec.html"];
  Node7 -> Node6 [color="grey25",fontsize="10",style="solid",label=" -function_mocker_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node7 [label="{testing::internal::\lFunctionMockerBase\<\l R(A1, A2, A3, A4, A5,\l A6) \>\n||+ FunctionMockerBase()\l+ ~FunctionMockerBase()\l+ FindOnCallSpec()\l+ PerformDefaultAction()\l+ UntypedPerformDefaultAction()\l+ UntypedPerformAction()\l+ ClearDefaultActionsLocked()\l# InvokeWith()\l# AddNewOnCallSpec()\l# AddNewExpectation()\l# current_spec()\l- DescribeDefaultActionTo()\l- UntypedDescribeUninterestingCall()\l- UntypedFindMatchingExpectation()\l- UntypedPrintArgs()\l- FindMatchingExpectationLocked()\l- FormatUnexpectedCallMessage\lLocked()\l- PrintTriedExpectationsLocked()\l- GTEST_DISALLOW_COPY\l_AND_ASSIGN_()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$da/de9/classtesting_1_1internal_1_1_function_mocker_base.html"];
  Node5 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node6 -> Node7 [color="grey25",fontsize="10",style="solid",label=" -current_spec_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node8 -> Node6 [color="grey25",fontsize="10",style="solid",label=" -matchers_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node8 [label="{testing::internal::\lFunction\< R(A1, A2,\l A3, A4, A5, A6) \>\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d3/db3/structtesting_1_1internal_1_1_function.html"];
}
